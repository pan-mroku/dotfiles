(message ".emacs start")
(add-to-list 'load-path "~/.emacs.d/")
(load "minimial-cedet-config.el")
(add-to-list 'load-path "~/.emacs.d/ecb")
(require 'ecb)
(require 'auto-complete)

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(ac-auto-show-menu t)
 '(ac-auto-start 2)
 '(ac-comphist-threshold 0.2)
 '(ac-delay 0.5)
 '(ac-expand-on-auto-complete nil)
 '(ac-modes (quote (emacs-lisp-mode lisp-interaction-mode c-mode cc-mode c++-mode java-mode clojure-mode scala-mode scheme-mode ocaml-mode tuareg-mode perl-mode cperl-mode python-mode ruby-mode ecmascript-mode javascript-mode js-mode js2-mode php-mode css-mode makefile-mode sh-mode fortran-mode f90-mode ada-mode xml-mode sgml-mode django-mode django-html-mode)))
 '(ac-show-menu-immediately-on-auto-complete t)
 '(ac-use-menu-map t)
 '(c-basic-offset 2)
 '(c-default-style (quote ((java-mode . "java") (awk-mode . "awk") (other . "gnu"))))
 '(c-offsets-alist (quote ((substatement-open . 0))))
 '(clean-buffer-list-kill-never-buffer-names (quote ("*scratch*" "*Messages*" "*server*" "*compilation*" "*Python*")))
 '(compilation-ask-about-save nil)
 '(compilation-scroll-output (quote first-error))
 '(compilation-skip-threshold 2)
 '(compilation-window-height 7)
 '(cua-mode t nil (cua-base))
 '(directory-abbrev-alist nil)
 '(ecb-auto-activate t)
 '(ecb-compilation-buffer-names (quote (("*Calculator*") ("*vc*") ("*vc-diff*") ("*Apropos*") ("*Occur*") ("*shell*") ("\\*[cC]ompilation.*\\*" . t) ("\\*i?grep.*\\*" . t) ("*JDEE Compile Server*") ("*Help*") ("*Completions*") ("*Backtrace*") ("*Compile-log*") ("*bsh*") ("*Messages*" . t))))
 '(ecb-compile-window-height 10)
 '(ecb-compile-window-prevent-shrink-below-height t)
 '(ecb-compile-window-temporally-enlarge nil)
 '(ecb-history-make-buckets (quote extension))
 '(ecb-layout-name "left16")
 '(ecb-layout-window-sizes (quote (("left16" ("ecb-history-buffer-name" 0.2 . 0.75) (ecb-directories-buffer-name 0.2 . 0.25)))))
 '(ecb-options-version "2.40")
 '(ecb-source-path (quote ("~/VS/DTS1k/glade/src" "~/VS/DTS1k/glade/include" "~/VS/external_libraries/boost_1_55_0/build/include")))
 '(ecb-tip-of-the-day nil)
 '(ecb-tree-indent 2)
 '(ede-project-directories (quote ("/home/pawel/VS/DTS1k" "/home/pawel/VS")))
 '(global-auto-complete-mode t)
 '(global-auto-revert-mode t)
 '(global-hl-line-mode t)
 '(global-semantic-highlight-func-mode t nil (semantic/util-modes))
 '(global-semantic-idle-local-symbol-highlight-mode t nil (semantic/idle))
 '(global-visual-line-mode t)
 '(gtags-auto-update t)
 '(gtags-path-style (quote relative))
 '(inhibit-startup-screen t)
 '(kill-whole-line t)
 '(midnight-mode t nil (midnight))
 '(pop-up-windows t)
 '(popwin-mode nil)
 '(popwin:adjust-other-windows t)
 '(popwin:special-display-config (quote (("*Miniedit Help*" :noselect t) (help-mode) (completion-list-mode :noselect t) (compilation-mode :noselect t) (grep-mode :noselect t) (occur-mode :noselect t) ("*Pp Macroexpand Output*" :noselect t) ("*Shell Command Output*") ("*vc-diff*") ("*vc-change-log*") (" *undo-tree*" :width 60 :position right) ("^\\*anything.*\\*$" :regexp t) ("*slime-apropos*") ("*slime-macroexpansion*") ("*slime-description*") ("*slime-compilation*" :noselect t) ("*slime-xref*") (sldb-mode :stick t) (slime-repl-mode) (slime-connection-list-mode))))
 '(same-window-buffer-names (quote ("*shell*" "*mail*" "*inferior-lisp*" "*ielm*" "*scheme*" "*Help*" "*Completions*")))
 '(semantic-c-dependency-system-include-path (quote ("/usr/include" "/usr/include/gtk-2.0" "~/VS/external_libraries/boost_1_55_0/build/include/")))
 '(semantic-default-submodes (quote (global-semantic-highlight-func-mode global-semantic-stickyfunc-mode global-semantic-idle-scheduler-mode global-semanticdb-minor-mode)))
 '(show-paren-mode t)
 '(standard-indent 2)
 '(tab-stop-list (quote (2 8 16 24 32 40 48 56 64 72 80 88 96 104 112 120)))
 '(tab-width 2)
 '(tags-revert-without-query t)
 '(tags-table-list (quote ("/home/pawel/VS/DTS1k/TAGS")))
 '(todoo-show-pop-up-window nil)
 '(wg-morph-on nil)
 '(wg-prefix-key "")
 '(wg-query-for-save-on-emacs-exit nil)
 '(wg-query-for-save-on-workgroups-mode-exit nil)
 '(workgroups-mode t)
 '(yas/also-auto-indent-first-line nil)
 '(yas/global-mode nil nil (yasnippet))
 '(yas/indent-line (quote fixed)))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(hl-line ((t (:background "darkviolet" :foreground "white")))))

(delete-selection-mode t)
(require 'color-theme)
(color-theme-initialize)
(color-theme-charcoal-black)

(hl-line-mode)

(setq backup-directory-alist
      `((".*" . ,"~/tmp/emacs")))
(setq auto-save-file-name-transforms
      `((".*" ,"~/tmp/emacs" t)))				

(global-set-key (kbd "C-<tab>") 'buffer-menu)
(global-set-key (kbd "M-<left>") 'windmove-left)
(global-set-key (kbd "M-<right>") 'windmove-right)
(global-set-key (kbd "M-<up>") 'windmove-up)
(global-set-key (kbd "M-<down>") 'windmove-down)
(global-set-key (kbd "C-a") 'mark-whole-buffer)
(global-set-key (kbd "<f12>") 'todoo-or-close-todoo)
(global-set-key (kbd "<C-S-iso-lefttab>") 'auto-complete)
(define-key ac-completing-map "C-g" 'ac-stop)
(global-set-key (kbd "C-e") 'ecb-goto-window-history)
(global-set-key (kbd "C-S-e") 'ecb-goto-window-directories)
(global-set-key (kbd "<S-f2>") 'ecb-toggle-compile-window)
(global-set-key (kbd "<f2>") 'ecb-toggle-ecb-windows)
(global-set-key (kbd "C-x <up>") 'ff-find-other-file)
(global-set-key (kbd "<S-delete>") 'kill-whole-line)

(ido-mode t)

(defun my-c-hook()
	(setq compile-command "make -C ~/VS/DTS1k/glade/Debug/ -j 10")
	(local-set-key (kbd "<backtab>") 'semantic-ia-complete-symbol-menu)
	(local-set-key (kbd "<f5>") 'compile)
	(local-set-key (kbd "C-.") 'semantic-ia-fast-jump)
	(ecb-activate)
	)
(add-hook 'c++-mode-hook 'my-c-hook)
(add-hook 'c-mode-hook 'my-c-hook)

(defun todoo-or-close-todoo()
  (interactive)
  (if (eq major-mode 'todoo-mode)
      (call-interactively 'todoo-save-and-exit)
    (call-interactively 'todoo)))

(add-hook 'post-command-hook
          (lambda ()
            (let ((messages (get-buffer "*Messages*")))
              (unless (eq (current-buffer) messages)
                (with-current-buffer messages
                  (goto-char (point-max)))))))

(add-hook 'comint-mode-hook
					(lambda()
						(local-set-key (kbd "<up>") 'comint-previous-input)
						(local-set-key (kbd "<down>") 'comint-next-input)
						)
					)

(defun delete-file-and-buffer ()
  "Kill the current buffer and deletes the file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (when filename
      (if (vc-backend filename)
          (vc-delete-file filename)
        (progn
          (delete-file filename)
          (message "Deleted file %s" filename)
          (kill-buffer)))))
	)

(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(setq ac-comphist-file (expand-file-name "~/.emacs.d/ac-comphist.dat"))
(defun auto-complete-mode-maybe ()
  "No maybe for you. Only AC!"
  (unless (minibufferp (current-buffer))
    (auto-complete-mode 1))
	)

;; (defun python-send-buffer-with-my-args (args)
;;   (interactive "sPython arguments: ")
;;   (let ((source-buffer (current-buffer)))
;;     (with-temp-buffer
;;       (insert "import sys; sys.argv = '''" args "'''.split()\n")
;;       (insert-buffer-substring source-buffer)
;;       (python-send-buffer)
;; 			)
;; 		(switch-to-buffer "*Python*")
;; 		(switch-to-buffer source-buffer)
;; 		)
;; 	)

(defun my-python-hook()
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/yasnippet/")
  (require 'yasnippet)
  (yas/initialize)
	
							;; (setq ac-sources '(ac-source-pycomplete
							;; 									 ac-source-yasnippet
							;; 									 ac-source-abbrev
							;; 									 ac-source-dictionary
							;; 									 ac-source-words-in-same-mode-buffers)
	;;(ac-set-trigger-key "<backtab>")
	(global-set-key (kbd "<backtab>") 'auto-complete)
	(setq compile-command (concat "export TRANSLATION_SCRIPT=\"/home/pawel/VS/DTS1k/Services/Debug/TranslationCLI\"; python " (buffer-file-name) " "))
	(global-set-key (kbd "<f5>") 'compile)
	(setq py-smart-indentation t)

	;; (setq py-shell-switch-buffers-on-execute-p t)
	;; (setq py-use-current-dir-when-execute-p t)
	;; (setq py-split-windows-on-execute-p nil)

	)
(add-hook 'python-mode-hook 'my-python-hook)

(defun my-django-mode()
	(python-mode t)

  (add-to-list 'load-path "~/.emacs.d/django-mode/")
  (require 'django-html-mode)
  (require 'django-mode)
  (yas/load-directory "/home/pawel/.emacs.d/django-mode/snippets")
  (add-to-list 'auto-mode-alist '("\\.djhtml$" . django-html-mode))
  )

(require 'cl-lib)
(add-to-list 'load-path "~/.emacs.d/smarttabs/")
(require 'smart-tabs-mode)
(smart-tabs-insinuate 'c 'c++)

(require 'joseph-single-dired)

(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(message ".emacs ok!")
