(message ".emacs start")

(if (< emacs-major-version 24)
		(progn 
			(add-to-list 'load-path "~/.emacs.d/lisp/before24")
			(add-to-list 'load-path "~/.emacs.d/lisp/ecb")
			(require 'ecb))
	(progn
		(require 'package)
		(add-to-list 'package-archives
								 '("melpa" . "https://melpa.org/packages/"))
		(package-initialize))
	)

;;---------------------------------------------------------------------------------------------------

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
	 ["#32302F" "#FB4934" "#B8BB26" "#FABD2F" "#83A598" "#D3869B" "#17CCD5" "#EBDBB2"])
 '(bm-cycle-all-buffers t)
 '(bm-electric-show t)
 '(bm-in-lifo-order t)
 '(bm-recenter t)
 '(c-basic-offset 2)
 '(c-default-style
	 (quote
		((java-mode . "java")
		 (awk-mode . "awk")
		 (other . "gnu"))))
 '(c-offsets-alist (quote ((substatement-open . 0))))
 '(cc-search-directories
	 (quote
		("." "/usr/include" "/usr/local/include/*")))
 '(clean-buffer-list-kill-never-buffer-names
	 (quote
		("*scratch*" "*Messages*" "*server*" "*compilation*" "*Python*")))
 '(company-auto-complete nil)
 '(company-auto-complete-chars (quote (32 46 34)))
 '(company-backends
	 (quote
		(company-rtags company-cmake company-clang company-dabbrev-code company-etags company-css company-files company-bbdb company-nxml company-eclim company-xcode company-capf
									 (company-gtags company-keywords)
									 company-oddmuse company-dabbrev)))
 '(company-completion-started-hook nil)
 '(company-frontends
	 (quote
		(company-echo-metadata-frontend company-pseudo-tooltip-unless-just-one-frontend-with-delay)))
 '(company-idle-delay nil)
 '(company-minimum-prefix-length 2)
 '(company-require-match nil)
 '(company-rtags-insert-arguments nil)
 '(compilation-ask-about-save nil)
 '(compilation-scroll-output (quote first-error))
 '(compilation-skip-threshold 2)
 '(compilation-window-height 7)
 '(cua-mode t nil (cua-base))
 '(custom-safe-themes
	 (quote
		("790f741ffa83f2d75897a0cd44f2aa625ff801f54b367fc00f55679e1769a176" "98a619757483dc6614c266107ab6b19d315f93267e535ec89b7af3d62fb83cad" "fc0c179ce77997ecb6a7833310587131f319006ef2f630c5a1fec1a9307bff45" "62408b3adcd05f887b6357e5bd9221652984a389e9b015f87bbc596aba62ba48" default)))
 '(directory-abbrev-alist nil)
 '(ecb-auto-activate t)
 '(ecb-compilation-buffer-names
	 (quote
		(("*Calculator*")
		 ("*vc*")
		 ("*vc-diff*")
		 ("*Apropos*")
		 ("*Occur*")
		 ("*shell*")
		 ("\\*[cC]ompilation.*\\*" . t)
		 ("\\*i?grep.*\\*" . t)
		 ("*JDEE Compile Server*")
		 ("*Help*")
		 ("*Completions*")
		 ("*Backtrace*")
		 ("*Compile-log*")
		 ("*bsh*")
		 ("*Messages*" . t))))
 '(ecb-compile-window-height 10)
 '(ecb-compile-window-prevent-shrink-below-height t)
 '(ecb-compile-window-temporally-enlarge nil)
 '(ecb-history-make-buckets (quote extension))
 '(ecb-layout-name "left16")
 '(ecb-layout-window-sizes
	 (quote
		(("left16"
			("ecb-history-buffer-name" 0.2 . 0.75)
			(ecb-directories-buffer-name 0.2 . 0.25)))))
 '(ecb-options-version "2.50")
 '(ecb-tip-of-the-day nil)
 '(ecb-tree-indent 2)
 '(ede-auto-add-method (quote multi-ask))
 ;; '(ede-project-directories (quote ("/home/..." "...")))
 '(egg-git-diff-options (quote ("--patience" "--ignore-space-change")))
 '(etags-select-go-if-unambiguous t)
 '(etags-table-search-up-depth 5)
 '(gdb-many-windows nil)
 '(gdb-same-frame nil)
 '(gdb-show-main t)
 '(ggtags-auto-jump-to-match nil)
 '(ggtags-mode-prefix-key "")
 '(ggtags-sort-by-nearness t)
 '(global-auto-complete-mode nil)
 '(global-auto-revert-mode t)
 '(global-company-mode t)
 '(global-hl-line-mode t)
 '(global-semantic-decoration-mode t)
 '(global-semantic-highlight-edits-mode nil)
 '(global-semantic-highlight-func-mode t)
 '(global-semantic-idle-breadcrumbs-mode nil nil (semantic/idle))
 '(global-semantic-idle-completions-mode nil nil (semantic/idle))
 '(global-semantic-idle-local-symbol-highlight-mode t nil (semantic/idle))
 '(global-semantic-idle-scheduler-mode nil)
 '(global-semantic-idle-summary-mode nil)
 '(global-semantic-show-parser-state-mode t)
 '(global-semantic-stickyfunc-mode t)
 '(global-semanticdb-minor-mode nil)
 '(global-visual-line-mode t)
 '(gtags-auto-update t)
 '(gtags-grep-all-text-files t)
 '(gtags-path-style (quote relative))
 '(gud-gdb-command-name "gdb -i=mi")
 '(gud-tooltip-mode t)
 '(inhibit-startup-screen t)
 '(initial-frame-alist (quote ((fullscreen . maximized))))
 ;; '(irony-cdb-search-directory-list (quote ("~/..." "...")))
 '(kill-whole-line t)
 '(midnight-mode t nil (midnight))
 '(package-selected-packages
	 (quote
		(flycheck flycheck-color-mode-line flycheck-rtags flycheck-status-emoji flycheck-tip flymake-python-pyflakes flymake-sass bm company-rtags rtags etags-select etags-table company-c-headers ac-etags ctags-update company-irony flycheck-irony flycheck-clang-tidy flycheck-clangcheck ## sass-mode todotxt irony-eldoc fuzzy-match fuzzy-format fuzzy ergoemacs-status ergoemacs-mode ecb darktooth-theme dark-souls ctags cpputils-cmake company-irony-c-headers cmake-project cmake-ide cmake-font-lock auto-complete-exuberant-ctags auto-complete-clang auto-complete-c-headers async ac-clang)))
 '(pop-up-windows t)
 '(popwin-mode nil)
 '(popwin:adjust-other-windows t)
 '(popwin:special-display-config
	 (quote
		(("*Miniedit Help*" :noselect t)
		 (help-mode)
		 (completion-list-mode :noselect t)
		 (compilation-mode :noselect t)
		 (grep-mode :noselect t)
		 (occur-mode :noselect t)
		 ("*Pp Macroexpand Output*" :noselect t)
		 ("*Shell Command Output*")
		 ("*vc-diff*")
		 ("*vc-change-log*")
		 (" *undo-tree*" :width 60 :position right)
		 ("^\\*anything.*\\*$" :regexp t)
		 ("*slime-apropos*")
		 ("*slime-macroexpansion*")
		 ("*slime-description*")
		 ("*slime-compilation*" :noselect t)
		 ("*slime-xref*")
		 (sldb-mode :stick t)
		 (slime-repl-mode)
		 (slime-connection-list-mode))))
 '(pos-tip-background-color "#36473A")
 '(pos-tip-foreground-color "#FFFFC8")
 '(python-shell-completion-native-enable nil)
 '(rtags-completions-enabled t)
 '(rtags-find-file-case-insensitive t)
 '(same-window-buffer-names
	 (quote
		("*shell*" "*mail*" "*inferior-lisp*" "*ielm*" "*scheme*" "*Help*" "*Completions*")))
 '(semantic-analyze-summary-function (quote semantic-format-tag-uml-prototype))
 '(semantic-c-dependency-system-include-path
	 (quote
		("/usr/include" "/usr/include/gtk-2.0" "/usr/include/libxml2" "/usr/include/gtkmm-3.0" "/usr/include/gtk-3.0")))
 '(semantic-complete-inline-analyzer-displayor-class (quote semantic-displayor-ghost))
 '(semantic-complete-inline-analyzer-idle-displayor-class (quote semantic-displayor-ghost))
 '(semantic-completion-displayor-format-tag-function (quote semantic-format-tag-prototype))
 '(semantic-default-submodes
	 (quote
		(global-semantic-highlight-func-mode global-semantic-decoration-mode global-semantic-stickyfunc-mode global-semantic-idle-scheduler-mode global-semantic-idle-summary-mode global-semantic-mru-bookmark-mode)))
 '(semantic-displayor-tooltip-mode (quote verbose))
 '(semantic-ia-completion-menu-format-tag-function (quote semantic-format-tag-prototype))
 '(semantic-idle-scheduler-idle-time 0.1)
 '(semantic-idle-scheduler-verbose-flag nil)
 '(semanticdb-find-default-throttle
	 (quote
		(local project unloaded system recursive omniscience)))
 ;; '(semanticdb-project-roots (quote ("~/...")))
 '(show-paren-mode t)
 '(speedbar-default-position (quote right))
 '(speedbar-sort-tags t)
 '(standard-indent 2)
 '(tab-stop-list
	 (quote
		(1 2 8 16 24 32 40 48 56 64 72 80 88 96 104 112 120)))
 '(tab-width 2)
 '(tags-revert-without-query t)
 ;; '(tags-table-list (quote ("/home/...")))
 '(temporary-bookmark-p nil)
 '(wg-morph-on nil)
 '(wg-prefix-key "")
 '(wg-query-for-save-on-emacs-exit nil)
 '(wg-query-for-save-on-workgroups-mode-exit nil)
 '(workgroups-mode t)
 '(yas/also-auto-indent-first-line nil)
 '(yas/global-mode nil nil (yasnippet))
 '(yas/indent-line (quote fixed))
 ;; '(ycmd-server-command (quote ("python" "/home/.../ycmd/ycmd/"))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "Noto Mono" :foundry "monotype" :slant normal :weight normal :height 105 :width normal))))
 '(bm-face ((t nil)))
 '(bm-fringe-face ((t nil)))
 '(bm-fringe-persistent-face ((t (:background "dark green" :foreground "White"))))
 '(bm-persistent-face ((t (:background "DarkGreen" :foreground "White"))))
 '(hl-line ((t (:background "darkviolet" :foreground "white"))))
 '(region ((t (:background "SlateBlue3"))))
 '(semantic-highlight-func-current-tag-face ((t (:box (:line-width 1 :color "grey75" :style pressed-button))))))

;;---------------------------------------------------------------------------------------------------

(add-to-list 'load-path "~/.emacs.d/lisp")

(if (file-exists-p "~/.emacs.d/lisp/system-includes.el")
		(load-file "~/.emacs.d/lisp/system-includes.el"))

(if (< emacs-major-version 24)
		(progn
			(add-to-list 'load-path "~/.emacs.d/lisp/cl-lib/")
			(require 'cl-lib)
			(require 'auto-complete)
			(require 'auto-complete-config)))

(if (< emacs-major-version 24)
		(progn
			(require 'color-theme)
			(color-theme-initialize)
			(color-theme-charcoal-black))
	(load-theme 'darktooth t))

(add-to-list 'default-frame-alist '(fullscreen . maximized))

(delete-selection-mode t)

(hl-line-mode)

(setq backup-directory-alist
      `((".*" . ,"~/tmp/emacs")))
(setq auto-save-file-name-transforms
      `((".*" ,"~/tmp/emacs" t)))				

(ido-mode t)

;; ;; Activate semantic
(semantic-mode 1)
(require 'semantic/ia)
(require 'semantic/bovine/gcc)
(set 'semantic-dependency-system-include-path 'my/include-dirs)

(semanticdb-enable-gnu-global-databases 'c-mode t)
(semanticdb-enable-gnu-global-databases 'c++-mode t)

(if	(< emacs-major-version 24)
		(progn
			(load-file "/usr/local/share/gtags/gtags.el")
			(when (cedet-ectag-version-check t)
				(semantic-load-enable-primary-ectags-support))))

(require 'bm)
(defun my/jump-hook()
	(let ((bookmark (bm-bookmark-at (point))))
    (unless bookmark
			(bm-bookmark-add))
		)
	)

(defun my/c-hook()
	(global-set-key (kbd "<f6>") 'gud-gdb)
	(defun my/jump()
		(interactive)
		(my/jump-hook)
		(rtags-find-symbol-at-point)
		)
	(local-set-key (kbd "C-.") 'my/jump)
	(local-set-key (kbd "M-[") 'bm-previous)
	(local-set-key (kbd "M-]") 'bm-next)
	(local-set-key (kbd "M-\\") 'bm-show-all)
	(local-set-key (kbd "C->") 'rtags-find-all-references-at-point)
	(ecb-activate)
	(if (>= emacs-major-version 24)
			(progn
				(cppcm-reload-all)
				))
	)
(add-hook 'c++-mode-hook 'my/c-hook)
(add-hook 'c-mode-hook 'my/c-hook)

(add-hook 'ff-pre-find-hook 'my/jump-hook)

(global-ede-mode 1)

(add-to-list 'load-path "~/.emacs.d/lisp/move-border/")
(require 'move-border)

(add-hook 'comint-mode-hook
					(lambda()
						(local-set-key (kbd "<up>") 'comint-previous-input)
						(local-set-key (kbd "<down>") 'comint-next-input)
						)
					)

(defun my/python-hook()
	(if (< emacs-major-version 24)
			(progn
				(add-to-list 'load-path "/usr/share/emacs/site-lisp/yasnippet/")
				(require 'yasnippet)))
  (yas/initialize)
	
	(setq py-smart-indentation t)
	)
(add-hook 'python-mode-hook 'my/python-hook)

(defun my/django-mode()
	(python-mode t)

  (add-to-list 'load-path "~/.emacs.d/lisp/django-mode/")
  (require 'django-html-mode)
  (require 'django-mode)
  (yas/load-directory "~/.emacs.d/lisp/django-mode/snippets")
  (add-to-list 'auto-mode-alist '("\\.djhtml$" . django-html-mode))
  )

(add-to-list 'load-path "~/.emacs.d/lisp/smarttabs/")
(require 'smart-tabs-mode)
(smart-tabs-insinuate 'c 'c++)

(require 'joseph-single-dired)

(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;;---------------------------------------------------------------------------------------------------

(global-set-key (kbd "C-<tab>") 'buffer-menu)
(global-set-key (kbd "M-<left>") 'windmove-left)
(global-set-key (kbd "M-<right>") 'windmove-right)
(global-set-key (kbd "M-<up>") 'windmove-up)
(global-set-key (kbd "M-<down>") 'windmove-down)
(global-set-key (kbd "C-a") 'mark-whole-buffer)
(global-set-key (kbd "<backtab>") 'company-complete-common)
(global-set-key (kbd "C-e") 'ecb-goto-window-history)
(global-set-key (kbd "C-S-e") 'ecb-goto-window-directories)
(global-set-key (kbd "<S-f2>") 'ecb-toggle-compile-window)
(global-set-key (kbd "<f2>") 'ecb-toggle-ecb-windows)
(global-set-key (kbd "C-x <up>") 'ff-find-other-file)
(global-set-key (kbd "C-x t") 'ff-find-other-file)
(global-set-key (kbd "<S-delete>") 'kill-whole-line)
(global-set-key (kbd "<f5>") 'compile)

;; terminator
(define-key input-decode-map "\e[3~" [?\C-d])
(define-key input-decode-map "\e[3;2~" [S-delete])
(define-key input-decode-map "\e[5~" [prior])
(define-key input-decode-map "\e[6~" [next])
(define-key input-decode-map "\e[1;2A" [S-up])
(define-key input-decode-map "\e[1;2B" [S-down])
(define-key input-decode-map "\e[1;2C" [S-right])
(define-key input-decode-map "\e[1;2D" [S-left])
(define-key input-decode-map "\e[1;3A" [M-up])
(define-key input-decode-map "\e[1;3B" [M-down])
(define-key input-decode-map "\e[1;3C" [M-right])
(define-key input-decode-map "\e[1;3D" [M-left])

(message ".emacs ok!")
